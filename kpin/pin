#! /usr/bin/env python3

import argparse
import boto3
import re
import semver
import functools
import sys

from typing import Dict, List, Tuple, Callable, ItemsView

ProjectVersionArg = Tuple[str, str]

class Image:
    __pin_prefix = 'pin-'
    __version_prefix = 'version-'

    def __init__(self, client, payload: Dict):
        self.__client = client
        """ :type: pyboto3.ecr """

        self.name = payload['repositoryName']
        self.digest = payload['imageDigest']
        self.versions = []
        self.pins = []
        self.__manifest = None

        for tag in payload['imageTags']:
            if tag.startswith(self.__version_prefix):
                self.versions.append(tag.lstrip(self.__version_prefix))
            elif tag.startswith(self.__pin_prefix):
                self.pins.append(tag.lstrip(self.__pin_prefix))

    def get_manifest(self) -> str:
        if self.__manifest is None:
            self.__manifest = self.__client.batch_get_image(
                repositoryName=self.name,
                imageIds=[
                    {'imageDigest': self.digest}
                ]
            )['images'][0]['imageManifest']

        return self.__manifest

    def add_pin(self, pin: str):
        if pin in self.pins:
            raise ValueError('Pin {} already exists!'.format(pin))
        self.__client.put_image(
            repositoryName=self.name,
            imageManifest=self.get_manifest(),
            imageTag=self.__pin_prefix + pin)
        self.pins.append(pin)


class Repository:
    def __init__(self, client, payload: Dict):
        self.__client = client
        """ :type: pyboto3.ecr """

        self.__name = payload['repositoryName']

        self.__images = None

    def __str__(self) -> str:
        return self.__name

    def get_images(self) -> List[Image]:
        if self.__images is None:
            response = self.__client.describe_images(repositoryName=self.__name, filter={'tagStatus': 'TAGGED'})
            self.__images = [Image(self.__client, i) for i in response['imageDetails']]

        return self.__images

    def get_images_by_property(self, prop: str) -> Dict[str, Image]:
        output = dict()

        for image in self.get_images():
            for item in getattr(image, prop):
                output[item] = image

        return output


class Registry:
    def __init__(self, client):
        self.__client = client
        """ :type: pyboto3.ecr """

    def get_repositories(self, names: List[str] = None) -> List[Repository]:
        args = {}

        if names:
            args['repositoryNames'] = names

        response = self.__client.describe_repositories(**args)
        return [Repository(self.__client, r) for r in response['repositories']]


class Output:
    def __init__(self, pretty):
        self.pretty = pretty

    def print_list(self, name: str, items: ItemsView[str, Image], property: str, comparator: Callable = None):
        buffer = []

        args = {}
        if comparator is not None:
            args['key'] = lambda t: comparator(t[0])

        for key, image in sorted(items, **args):
            if getattr(image, property):
                buffer.append('{} ({})'.format(key, ' '.join(getattr(image, property))))
            else:
                buffer.append(key)

        if buffer:
            if self.pretty:
                print('{}:\n  '.format(name) + '\n  '.join(buffer) + '\n')
            else:
                print('{}: '.format(name) + '\n{}: '.format(name).join(buffer))


class Commands:
    def __init__(self, registry: Registry, output: Output):
        self.registry = registry
        self.output = output

    def show_versions(self, repository_names: List[str] = None):
        repositories = self.registry.get_repositories(repository_names)

        comparator = functools.cmp_to_key(semver.compare)

        for repository in sorted(repositories, key=lambda k: str(k)):
            images_by_version = repository.get_images_by_property('versions')

            self.output.print_list(str(repository), images_by_version.items(), 'pins', comparator)

    def show_pins(self, environment_names: List[str] = None):
        repositories = self.registry.get_repositories()

        environments = dict()
        for repository in repositories:
            images_by_pin = repository.get_images_by_property('pins')

            for pin, image in images_by_pin.items():
                if not environments or pin in environment_names:
                    environments.setdefault(pin, dict())[image.name] = image

        for environment, images in sorted(environments.items(), key=lambda k: k[0]):
            self.output.print_list(environment, images.items(), 'versions')

    def set_pins(self, environment: str, projects: List[ProjectVersionArg]):
        repositories = self.registry.get_repositories()

        for project, version in projects:
            for repository in repositories:
                if str(repository) == project or str(repository).startswith(project + '-'):
                    versions = repository.get_images_by_property('versions')
                    pins = repository.get_images_by_property('pins')

                    try:
                        new_image = versions[version]
                    except KeyError:
                        print("Version {} not found for {}! Skipping.".format(version, repository))
                        continue

                    if environment in new_image.pins:
                        print(repository, 'is already tagged for', environment)
                        continue

                    new_image.add_pin('pin-' + environment)
                    print('Pinned {} to {}!'.format(repository, version))

                    try:
                        current_image = pins[environment]
                        current_image.add_pin(environment + '-old')
                    except KeyError:
                        print("No image to pin with {}-old".format(environment))

                    try:
                        old_image = pins[environment + '-old']
                        old_image.add_pin(environment + '-old-old')
                    except KeyError:
                        print("No image to pin with {}-old-old".format(environment))


def project_version(arg: str) -> ProjectVersionArg:
    project, version = arg.split('@')
    if not re.compile('^[A-Za-z0-9_.\-]+$').fullmatch(project):
        raise ValueError("{} is not a valid project name".format(project))
    semver.parse(version)
    return project, version


def main():
    registry = Registry(boto3.client('ecr'))
    output = Output(sys.stdout.isatty())
    commands = Commands(registry, output)

    parser = argparse.ArgumentParser()

    subparsers = parser.add_subparsers(title='Commands', metavar=None)

    set_parser = subparsers.add_parser('set', help='Set pins')
    set_parser.set_defaults(func=lambda e: commands.set_pins(e.ENVIRONMENT, e.PROJECT))
    set_parser.add_argument('ENVIRONMENT', help='Environment pin to add')
    set_parser.add_argument('PROJECT', nargs='+', type=project_version, help='Project to pin: project@semver')

    list_parser = subparsers.add_parser('show', help='Show pins')
    list_parser.set_defaults(func=lambda e: commands.show_pins(e.ENVIRONMENT))
    list_parser.add_argument('ENVIRONMENT', nargs='*', help='Environment to list pins from')

    versions_parser = subparsers.add_parser('list-versions', help='List available versions')
    versions_parser.set_defaults(func=lambda p: commands.show_versions(p.PROJECT))
    versions_parser.add_argument('PROJECT', nargs='*')

    # auto-help
    if not sys.argv[1:]:
        sys.argv.insert(1, '-h')

    args = parser.parse_args()

    if hasattr(args, 'func'):
        args.func(args)


if __name__ == '__main__':
    main()
