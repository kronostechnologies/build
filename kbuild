#!/bin/bash
# Build script
set -e -u

SCRIPT_DIR="$( cd -P "$( dirname "$0" )" && pwd )"
CURRENT_DIR=`pwd`
_npm () {
  if [ -f package.json ];
  then
    if [ "$1" == 'dev' ];
    then
      npm install
      npm update
    elif [ "$1" == 'release' ];
    then
      npm install
    fi
  fi
}

_bower () {
  if [ -f bower.json ];
  then
    if [ "$1" == 'dev' ];
    then
      bower --config.interactive=false install
      bower --config.interactive=false update
    elif [ "$1" == 'release' ];
    then
      bower --config.interactive=false install
      bower --config.interactive=false update
    fi
  fi
}

_grunt () {
  if [ -f Gruntfile.js ];
  then
    if [ "$1" == 'dev' ];
    then
      grunt build-dev
    elif [ "$1" == 'release' ];
    then
      grunt build
    fi
  fi
}

_composer () {
  if [ -f composer.json ];
  then
    if [ "$1" == 'dev' ];
    then
      composer install -n --prefer-dist --ignore-platform-reqs
    elif [ "$1" == 'release' ];
    then
      composer install -n --no-dev -o --prefer-dist --ignore-platform-reqs
      find ./vendor/ -type d -name ".git" -exec rm -rf {} \;
    fi
  fi
}

_clean () {

  if [ -f package.json ];
  then
    find . -type d -name 'node_modules' -exec rm -rf "{}" \; 2>/dev/null || true
  fi

  if [ -f bower.json ];
  then
    find . -type d -name 'bower_components' -exec rm -rf "{}" \; 2>/dev/null || true
  fi

  if [ -d .sass-cache ];
  then
    rm -rf .sass-cache/ 2>/dev/null || true
  fi

}

_rpm () {
  if [ ! `which rpmbuild` ];
  then
    sudo apt-get install rpm
  fi
  fpm -s dir -t rpm -a all -n $pkg_name --prefix $pkg_dir -v $pkg_version --inputs $pkg_deploy --log=error
}

_deb () {
  if [ ! `which debuild` ];
  then
    sudo apt-get install debuild
  fi

  fpm -s dir -t deb -a all -n $pkg_name --prefix $pkg_dir -v $pkg_version --inputs $pkg_deploy --log=error
}

_getJson () {
  set +e
  echo $(python -c "import json,sys;obj=json.load(open('$pkg_file'));sys.stdout.write(obj['$1'].strip())" 2>/dev/null)
  set -e
}

_publish () {
  pkg_file='package.json'

  if [ -f $pkg_file ];
  then

    pkg_name=$(_getJson 'name')
    if [ -z $pkg_name ];
    then 
      echo 'Please specify name in package.json'
      exit 1
    fi

    pkg_version=$(_getJson 'version')
    if [ -z $pkg_version ];
    then 
      echo 'Please specify version in package.json'
      echo 'version: "1.1.0"'
      exit 1
    fi

    pkg_dir=$(_getJson 'pkg-dir')
    if [ -z $pkg_dir ];
    then 
      echo 'Please specify pkg-dir in package.json'
      echo 'pkg-dir: "/srv/kronos/app/"'
      exit 1
    fi
    
    pkg_deploy=$(_getJson 'pkg-deploy')

    if [ -z $pkg_deploy ];
    then 
      echo 'Please specify pkg-deploy file in package.json'
      echo 'pkg-deploy: ".deploy"'
      echo 'One line per deployed file or folder'
      exit 1
    fi

    if [ ! `which fpm` ];
    then
      gem install --no-ri --no-rdoc fpm
    fi
    _deb
    _rpm
  else
    echo 'Could not load correct configuration from package.json'
    exit 1
  fi

}

cd $CURRENT_DIR

if [[ $# != 0 && "$1" == '--dev' ]]
then
  _npm dev
  _bower dev
  _grunt dev
  _composer dev
elif [[ $# != 0 && "$1" == '--release' ]]
then
  _npm release
  _bower release
  _grunt release
  _composer release
  _clean
elif [[ $# != 0 && "$1" == '--publish' ]]
then
  _publish
else
  echo "Usage: $0 --dev | --release | --publish"Â 
  exit 1
fi
cd $CURRENT_DIR
